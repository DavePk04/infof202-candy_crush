#include "Board.hpp"
#include <algorithm>
#include <unordered_set>
#include<set>

using namespace std;


vector<int> delete_ele(vector<int> vec, int num)
{
  // initializing a reverse iterator
  vector<int>::reverse_iterator itr1;

  for (itr1 = vec.rbegin(); itr1 < vec.rend(); itr1++) {

      if (*itr1 == num) {

//          printf ("élément à supprimer = %i \n", num);
          vec.erase((itr1 + 1).base());
        }
    }

  return vec;
}


int Board::GetColorAt(int row, int col)
{
  if (col < 0 || col >= GRID_DIMENSION
      || row < 0 || row >= GRID_DIMENSION)
    return -1;

  auto color = board[row][col];

  return color;
}


void Board::gen_color_grid ()
{
  std::vector<int> color_vect{1,2,3,4,5,6};
  for (int i = 0; i < GRID_DIMENSION; i++)
    {
      std::vector<int> copy_color_vect(color_vect);
      board[i] = new int[GRID_DIMENSION];
      for (int j = 0; j <= GRID_DIMENSION; j++)
        {
          int left1 = GetColorAt(i, j - 1); //2
          int left2 = GetColorAt(i, j - 2);
          if (left2 != -1 && left1 == left2) // 3
          {
            copy_color_vect = delete_ele (copy_color_vect, left1);
          }

          int down1 = GetColorAt(i - 1, j); // 5
          int down2 = GetColorAt(i - 2, j);
          if (down2 != -1 && down1 == down2)
          {
              copy_color_vect = delete_ele (copy_color_vect, down1);
          }

          int color = copy_color_vect[rand () % copy_color_vect.size ()];
          board[i][j] = color;
        }
    }

}

void print_board(int** data)
{
    for (int x = 0; x < GRID_DIMENSION; x++)
    {
        for (int y = 0; y < GRID_DIMENSION; y++)
        {
            printf(" %d", data[x][y]);       
        }
        printf("\n");
    }
    
}

Board::Board() {
    gen_color_grid();
}


int** Board::getBoard() {
    return board;
}

bool Board::is_inBoard(Point pos) { 
    return (0 <= pos.x and pos.x < GRID_DIMENSION && 0 <= pos.y && pos.y < GRID_DIMENSION);
}


/**
* Check if the wanted swap create alignment of identical candies
*/
bool Board::is_validSwap(Point origine, Point target) {

    int OrigineColor = board[origine.x][origine.y];
    for (auto &shift: DIR){
        Point new_target = target + shift;
        aligned_candies_H.clear();
        aligned_candies_V.clear();
        aligned_candies_H.push_back(origine);
        aligned_candies_V.push_back(origine);
        while (new_target.x > 0 && new_target.y > 0 && new_target.x < GRID_DIMENSION && new_target.y < GRID_DIMENSION
               && board[new_target.x][new_target.y] == OrigineColor && aligned_candies_V.size() <= MIN_CANDIES_ALIGNED && aligned_candies_H.size() <= MIN_CANDIES_ALIGNED)
        {
            if (shift.x==0) {  // DIR verticales
                aligned_candies_H.push_back(new_target);
            }
            else{
                aligned_candies_V.push_back(new_target);
            }  
            new_target = new_target + shift;
        }
        printf ("V = %s and H = %s\n", to_string(aligned_candies_V.size()).c_str(), to_string(aligned_candies_H.size()).c_str());
    }
    return !(origine == target) && (aligned_candies_H.size() >= MIN_CANDIES_ALIGNED || aligned_candies_V.size() >= MIN_CANDIES_ALIGNED);  // none swap between two candies with same color
}


vector<Point> Board::FindColumnMatchForCell(int row, int col, int color)
{
  vector<Point> result;
  for (int i = col + 1; i < GRID_DIMENSION; i++)
    {
      int nextColumnColor = GetColorAt(row, i);
      if (nextColumnColor != color)
        {
          break;
        }
      result.push_back({row,i});
    }
  return result;
}


vector<Point> Board::FindRowMatchForCell(int row, int col, int color)
{
  vector<Point> result;
  for (int i = row + 1; i < GRID_DIMENSION; i++)
    {
      int nextRowColor = GetColorAt(i, col);
      if (nextRowColor != color)
        {
          break;
        }
      result.push_back({i, col});
    }
  return result;
}


bool Board::CheckMatches(){

  vector<Point> matchedCells;

  for (int row = 0; row < GRID_DIMENSION; row++)
    {
      for (int col = 0; col < GRID_DIMENSION; col++)
        {
          int currentColor = GetColorAt (row, col);

          aligned_candies_H = FindColumnMatchForCell(row, col, currentColor);

          if (aligned_candies_H.size() >= 2)
            {
              for(auto alignedcell: aligned_candies_H)
                {
                  if (count (matchedCells.begin(), matchedCells.end(), alignedcell) == 0)
                    matchedCells.push_back(alignedcell);
                }
              Point to_store{row, col};
              if (count (matchedCells.begin(), matchedCells.end(), to_store) == 0)
                matchedCells.push_back(to_store);
            }

          aligned_candies_V = FindRowMatchForCell(row, col, currentColor);

          if (aligned_candies_V.size() >= 2)
            {
              for(auto alignedcell: aligned_candies_V)
                {
                  if (count (matchedCells.begin(), matchedCells.end(), alignedcell) == 0)
                    matchedCells.push_back(alignedcell);
                }

              Point to_store{row, col};
              if (count (matchedCells.begin(), matchedCells.end(), to_store) == 0)
                matchedCells.push_back(to_store); // 5
            }
        }
    }

    for(auto CellToDelete:matchedCells)
      board[CellToDelete.x][CellToDelete.y] = -1;

  return matchedCells.size() > 0;

}


/**
* method called when a swap is done 
*/
void Board::swap(Point cell_1, Point cell_2) {

  int tmp = board[cell_2.x][cell_2.y];
  board[cell_2.x][cell_2.y] = board[cell_1.x][cell_1.y];
  board[cell_1.x][cell_1.y] = tmp;

  bool changesOccurs = CheckMatches();

  if(!changesOccurs)
    {
      tmp = board[cell_1.x][cell_1.y];
      board[cell_1.x][cell_1.y] = board[cell_2.x][cell_2.y];
      board[cell_2.x][cell_2.y] = tmp;
    }

  print_board(board);
}

/**
* reorganization upwards
*/
void Board::swim(Point p){
    int x = p.x;
    int y = p.y;
    board[x][y] = CANDY_DELETED;    // replace deleted candy by random candy (=rand()%TOTALCOLOR + 1)
    int i=x-1;
    while (i >= 0 && x >= 0){
        int nbr = board[x][y];
        board[x][y] = board[i][y];
        board[i][y] = nbr;
        i--;
        x--;
    }
}

void Board::delete_candies(vector<Point> targets){
    if (targets.size() >= MIN_CANDIES_ALIGNED)
    {
        for(auto &t:targets)
            swim(t);
    }
}

int main(){
    Board bd;
    int** board = bd.getBoard();
    print_board(board);
    printf("-----------\n");
//     bd.swap(Point{0,6}, Point{0,5});
//     printf("-----------\n");
     bd.swap(Point{0,6}, Point{1,6});
    // bd.swap(Point{4,4}, Point{4,5});
    // bd.swap(Point{1,0}, Point{1,1});
    printf("-----------\n");
    //bd.swap(Point{7,1}, Point{8,1});
    //bd.swap(Point{2,6}, Point{3,6});
    // bd.swap(Point{8,8}, Point{8,7});
    // vector<Point> vector1 = {Point{8,0}, Point{8,1}, Point{8,2}};
    // vector<Point> vector2 = {Point{3,6}, Point{4,6}, Point{5,6}};
    // bd.delete_candies(vector2);
    // printf("-----------\n");
    // print_board(board);
}
















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































